# -*- coding: utf-8 -*-
"""Prototype.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-AXhtEGAwMbHZ61BcOMmMV95Hurpy9o
"""
import streamlit as st
import pandas as pd
import joblib
from data_preprocessing import data_preprocessing, encoder_Course, encoder_Daytime_evening_attendance, encoder_Fathers_occupation, encoder_Fathers_qualification, encoder_Gender, encoder_Marital_status, encoder_Mothers_occupation, encoder_Mothers_qualification, encoder_Previous_qualification, encoder_Scholarship_holder
from prediction import prediction

col1, col2 = st.columns([1, 5])
with col1:
    st.image("https://github.com/Shue84/Jaya-Jaya/blob/main/JAYA%20JAYA.png", width=130)
with col2:
    st.header('Students Dropout Prediction (Prototype)')

data = pd.DataFrame()

col1, col2, col3 = st.columns(3)

with col1:
    Age_at_enrollment = int(st.number_input(label='Age_at_enrollment', value=15))
    data["Age_at_enrollment"] = Age_at_enrollment

with col2:
    Gender = st.selectbox(label='Gender', options=encoder_Gender.classes_, index=1)
    data["Gender"] = [Gender]

with col3:
    Marital_status = st.selectbox(label='Marital_status', options=onehot_encoder.classes_, index=5)
    data["Marital_status"] = Marital_status


col1, col2, col3 = st.columns(3)

with col1:
    Course = st.selectbox(label='Course', options=onehot_encoder.classes_, index=16)
    data["Course"] = Course

with col2:
    Daytime_evening_attendance = st.selectbox(label='Daytime_evening_attendance', options=encoder_Daytime_evening_attendance.classes_, index=1)
    data["Daytime_evening_attendance"] = Daytime_evening_attendance

with col3:
    Scholarship_holder = st.selectbox(label='Scholarship_holder', options=encoder_Scholarship_holder.classes_, index=1)
    data["Scholarship_holder"] = Scholarship_holder


col1, col2, col3, col4 = st.columns(4)

with col1:
    Fathers_qualification = st.selectbox(label='Fathers_qualification', options=encoder_Fathers_qualification.classes_, index=28)
    data["Fathers_qualification"] = Fathers_qualification

with col2:
    Mothers_qualification = st.selectbox(label='Mothers_qualification', options=encoder_Mothers_qualification.classes_, index=28)
    data["Mothers_qualification"] = Mothers_qualification

with col3:
    Fathers_occupation = st.selectbox(label='Fathers_occupation', options=encoder_Fathers_occupation.classes_, index=31)
    data["Fathers_occupation"] = Fathers_occupation

with col4:
    Mothers_occupation = st.selectbox(label='Mothers_occupation', options=encoder_Mothers_occupation.classes_, index=31)
    data["Mothers_occupation"] = Mothers_occupation

col1, col2 = st.columns(2)

with col1:
    Previous_qualification = st.selectbox(label='Previous_qualification', options=onehot_encoder.classes_, index=16)
    data["Previous_qualification"] = Previous_qualification

with col2:
    Previous_qualification_grade = int(st.number_input(label='Previous_qualification_grade', value=0))
    data["Previous_qualification_grade"] = Previous_qualification_grade


col1, col2 = st.columns(2)

with col1:
    Curriculum_units_1st_sem_approved = int(st.number_input(label='Curriculum_units_1st_sem_approved', value=0))
    data["Curriculum_units_1st_sem_approved"] = Curriculum_units_1st_sem_approved

with col2:
    Curriculum_units_2nd_sem_approved = int(st.number_input(label='Curriculum_units_2nd_sem_approved', value=0))
    data["Curriculum_units_2nd_sem_approved"] = Curriculum_units_2nd_sem_approved


col1, col2 = st.columns(2)

with col1:
    Curriculum_units_1st_sem_grade = int(st.number_input(label='Curriculum_units_1st_sem_grade', value=0))
    data["Curriculum_units_1st_sem_grade"] = Curriculum_units_1st_sem_grade

with col2:
    Curriculum_units_2nd_sem_grade = int(st.number_input(label='Curriculum_units_2nd_sem_grade', value=0))
    data["Curriculum_units_2nd_sem_grade"] = Curriculum_units_2nd_sem_grade

with st.expander("View the Raw Data"):
    st.dataframe(data=data, width=800, height=10)

if st.button('Predict'):
    new_data = data_preprocessing(data=data)
    with st.expander("View the Preprocessed Data"):
        st.dataframe(data=new_data, width=800, height=10)
    st.write("Status: {}".format(prediction(new_data)))
