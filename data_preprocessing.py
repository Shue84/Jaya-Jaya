# -*- coding: utf-8 -*-
"""data_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CeiWSJriHUBRY9ULtBpS8pOwVhgP1emy
"""

import joblib
import numpy as np
import pandas as pd

onehot_encoder = joblib.load('/model/onehot_encoder.joblib')
encoder_Daytime_evening_attendance = joblib.load('/model/encoder_Daytime_evening_attendance.joblib')
encoder_Fathers_occupation = joblib.load('/model/encoder_Fathers_occupation.joblib')
encoder_Fathers_qualification = joblib.load('/model/encoder_Fathers_qualification.joblib')
encoder_Gender = joblib.load('/model/encoder_Gender.joblib')
encoder_Mothers_occupation = joblib.load('/model/encoder_Mothers_occupation.joblib')
encoder_Mothers_qualification = joblib.load('/model/encoder_Mothers_qualification.joblib')
encoder_Scholarship_holder = joblib.load('/model/encoder_Scholarship_holder.joblib')
pca_1 = joblib.load('/model/pca_1.joblib')
scaler_Age_at_enrollment = joblib.load('/model/scaler_Age_at_enrollment.joblib')
scaler_Curricular_units_1st_sem_approved = joblib.load('/model/scaler_Curricular_units_1st_sem_approved.joblib')
scaler_Curricular_units_1st_sem_grade = joblib.load('/model/scaler_Curricular_units_1st_sem_grade.joblib')
scaler_Curricular_units_2nd_sem_approved = joblib.load('/model/scaler_Curricular_units_2nd_sem_approved.joblib')
scaler_Curricular_units_2nd_sem_grade = joblib.load('/model/scaler_Curricular_units_2nd_sem_grade.joblib')
scaler_Previous_qualification_grade = joblib.load('/model/scaler_Previous_qualification_grade.joblib')

pca_numerical_columns = [
    'Age_at_enrollment',
    'Curricular_units_1st_sem_approved',
    'Curricular_units_1st_sem_grade',
    'Curricular_units_2nd_sem_approved',
    'Curricular_units_2nd_sem_grade',
    'Previous_qualification_grade'
]

def data_preprocessing(data):
    """Preprocessing data

    Args:
        data (Pandas DataFrame): Dataframe that contain all the data to make prediction

    return:
        Pandas DataFrame: Dataframe that contain all the preprocessed data
    """
    data = data.copy()
    df = pd.DataFrame()

    df['Course'] = encoder_Course.transform(data['Course'])
    df['Daytime/evening attendance'] = encoder_Daytime_evening_attendance.transform(data['Daytime/evening attendance'])
    df['Fathers_occupation'] = encoder_Fathers_occupation.transform(data['Fathers_occupation'])
    df['Fathers_qualification'] = encoder_Fathers_qualification.transform(data['Fathers_qualification'])
    df['Gender'] = encoder_Gender.transform(data['Gender'])
    df['Marital_status'] = encoder_Marital_status.transform(data['Marital_status'])
    df['Mothers_occupation'] = encoder_Mothers_occupation.transform(data['Mothers_occupation'])
    df['Mothers_qualification'] = encoder_Mothers_qualification.transform(data['Mothers_qualification'])
    df['Previous_qualification'] = encoder_Previous_qualification.transform(data['Previous_qualification'])
    df['Scholarship_holder'] = encoder_Scholarship_holder.transform(data['Scholarship_holder'])

    # PCA
    data['Age_at_enrollment'] = scaler_Age_at_enrollment.transform(np.asarray(data['Age_at_enrollment']).reshape(-1,1))[0]
    data['Curricular_units_1st_sem_approved'] = scaler_Curricular_units_1st_sem_approved.transform(np.asarray(data['Curricular_units_1st_sem_approved']).reshape(-1,1))[0]
    data['Curricular_units_1st_sem_grade'] = scaler_Curricular_units_1st_sem_grade.transform(np.asarray(data['Curricular_units_1st_sem_grade']).reshape(-1,1))[0]
    data['Curricular_units_2nd_sem_approved'] = scaler_Curricular_units_2nd_sem_approved.transform(np.asarray(data['Curricular_units_2nd_sem_approved']).reshape(-1,1))[0]
    data['Curricular_units_2nd_sem_grade'] = scaler_Curricular_units_2nd_sem_grade.transform(np.asarray(data['Curricular_units_2nd_sem_grade']).reshape(-1,1))[0]
    data['Previous_qualification_grade'] = scaler_Previous_qualification_grade.transform(np.asarray(data['Previous_qualification_grade']).reshape(-1,1))[0]
    df[pca_numerical_columns] = pca_1.transform(data[pca_numerical_columns])

    return df
