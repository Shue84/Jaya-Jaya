# -*- coding: utf-8 -*-
"""data_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CeiWSJriHUBRY9ULtBpS8pOwVhgP1emy
"""

import joblib
import numpy as np
import pandas as pd

onehot_encoder = joblib.load('model/onehot_encoder.joblib')
encoder_Daytime_evening_attendance = joblib.load('model/encoder_Daytime_evening_attendance.joblib')
encoder_Fathers_occupation = joblib.load('model/encoder_Fathers_occupation.joblib')
encoder_Fathers_qualification = joblib.load('model/encoder_Fathers_qualification.joblib')
encoder_Gender = joblib.load('model/encoder_Gender.joblib')
encoder_Mothers_occupation = joblib.load('model/encoder_Mothers_occupation.joblib')
encoder_Mothers_qualification = joblib.load('model/encoder_Mothers_qualification.joblib')
encoder_Scholarship_holder = joblib.load('model/encoder_Scholarship_holder.joblib')
pca_1 = joblib.load('model/pca_1.joblib')
scaler_Age_at_enrollment = joblib.load('model/scaler_Age_at_enrollment.joblib')
scaler_Curricular_units_1st_sem_approved = joblib.load('model/scaler_Curricular_units_1st_sem_approved.joblib')
scaler_Curricular_units_1st_sem_grade = joblib.load('model/scaler_Curricular_units_1st_sem_grade.joblib')
scaler_Curricular_units_2nd_sem_approved = joblib.load('model/scaler_Curricular_units_2nd_sem_approved.joblib')
scaler_Curricular_units_2nd_sem_grade = joblib.load('model/scaler_Curricular_units_2nd_sem_grade.joblib')
scaler_Previous_qualification_grade = joblib.load('model/scaler_Previous_qualification_grade.joblib')

pca_numerical_columns = [
    'Age_at_enrollment',
    'Curricular_units_1st_sem_approved',
    'Curricular_units_1st_sem_grade',
    'Curricular_units_2nd_sem_approved',
    'Curricular_units_2nd_sem_grade',
    'Previous_qualification_grade'
]
# Define the correct order of columns for one-hot encoding
onehot_encoded_columns = ['Marital_status', 'Course', 'Previous_qualification']

def data_preprocessing(data):
    """Preprocessing data

    Args:
        data (Pandas DataFrame): Dataframe that contain all the data to make prediction

    return:
        Pandas DataFrame: Dataframe that contain all the preprocessed data
    """
    data = data.copy()
    df_processed = pd.DataFrame()  # Use a different name to avoid shadowing

    # Handle NaNs in numerical columns *before* scaling
    for col in pca_numerical_columns:
        if data[col].isnull().any():
            print(f"NaNs found in {col} before imputation.")
            data[col] = data[col].fillna(data[col].mean())  # Or other imputation method
            print(f"NaNs in {col} after imputation: {data[col].isnull().sum()}")

    # Scale numerical features
    data['Age_at_enrollment'] = scaler_Age_at_enrollment.transform(data[['Age_at_enrollment']])
    data['Curricular_units_1st_sem_approved'] = scaler_Curricular_units_1st_sem_approved.transform(data[['Curricular_units_1st_sem_approved']])
    data['Curricular_units_1st_sem_grade'] = scaler_Curricular_units_1st_sem_grade.transform(data[['Curricular_units_1st_sem_grade']])
    data['Curricular_units_2nd_sem_approved'] = scaler_Curricular_units_2nd_sem_approved.transform(data[['Curricular_units_2nd_sem_approved']])
    data['Curricular_units_2nd_sem_grade'] = scaler_Curricular_units_2nd_sem_grade.transform(data[['Curricular_units_2nd_sem_grade']])
    data['Previous_qualification_grade'] = scaler_Previous_qualification_grade.transform(data[['Previous_qualification_grade']])

    # One-hot encode the categorical features
    encoded_cols = onehot_encoder.transform(data[onehot_encoded_columns])
    encoded_df = pd.DataFrame(encoded_cols, index=data.index, columns=onehot_encoder.get_feature_names_out())
    df_processed = pd.concat([df_processed, encoded_df], axis=1)

    # Encode the other categorical features
    df_processed['Daytime_evening_attendance'] = encoder_Daytime_evening_attendance.transform(data['Daytime_evening_attendance'])
    df_processed['Fathers_occupation'] = encoder_Fathers_occupation.transform(data['Fathers_occupation'])
    df_processed['Fathers_qualification'] = encoder_Fathers_qualification.transform(data['Fathers_qualification'])
    df_processed['Gender'] = encoder_Gender.transform(data['Gender'])
    df_processed['Mothers_occupation'] = encoder_Mothers_occupation.transform(data['Mothers_occupation'])
    df_processed['Mothers_qualification'] = encoder_Mothers_qualification.transform(data['Mothers_qualification'])
    df_processed['Scholarship_holder'] = encoder_Scholarship_holder.transform(data['Scholarship_holder'])

    # Create PCA input from the scaled data
    X_pca_input = data[pca_1.feature_names_in_].copy()

    # Perform PCA
    pca_transformed = pca_1.transform(X_pca_input)
    pca_df = pd.DataFrame(pca_transformed, index=data.index, columns=pca_numerical_columns)
    df_processed = pd.concat([df_processed, pca_df], axis=1)

    return df_processed
